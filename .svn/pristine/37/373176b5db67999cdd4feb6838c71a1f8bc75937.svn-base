package com.puban.overtime.authority.service.impl;

import com.puban.framework.core.page.PageView;
import com.puban.framework.core.page.QueryResult;
import com.puban.framework.core.service.impl.BaseServiceImpl;
import com.puban.overtime.authority.dao.IRoleDao;
import com.puban.overtime.authority.dao.IRolePermissionDao;
import com.puban.overtime.authority.dao.IUserRoleDao;
import com.puban.overtime.authority.model.Permission;
import com.puban.overtime.authority.model.Role;
import com.puban.overtime.authority.model.RolePermission;
import com.puban.overtime.authority.model.UserRole;
import com.puban.overtime.authority.service.IPermissionService;
import com.puban.overtime.authority.service.IRoleService;
import com.puban.overtime.authority.shiro.ResultVO;

import javax.annotation.Resource;
import java.util.*;

/**
 * @author zengyong@puban.com
 * @ClassName: RoleServiceImpl
 * @Description:
 * @date: 2016/5/24
 */

public class RoleServiceImpl extends BaseServiceImpl<Role> implements IRoleService {

    @Resource(name = "roleDao")
    private IRoleDao roleDao;

    @Resource(name = "userRoleDao")
    private IUserRoleDao userRoleDao;

    @Resource(name = "rolePermissionDao")
    private IRolePermissionDao rolePermissionDao;

    @Resource(name = "permissionService")
    private IPermissionService permissionService;
    /**
     * 分页带条件查询数据
     */
    @Override
    public PageView<Role> queryBySerach(String roleName, Integer currentPage) {
        PageView<Role> pageView = new PageView<Role>(5, currentPage);
        /** 查询条件 **/
        List<Object> paramterList = new ArrayList<Object>();
        if (currentPage == null) {
            currentPage = 1;
        }
        int firstindex = (pageView.getCurrentpage() - 1) * pageView.getMaxresult();

        LinkedHashMap<String, String> orderby = new LinkedHashMap<String, String>();
        orderby.put("fdId", "desc");

        StringBuffer whereHql = new StringBuffer();
        whereHql.append(" 1=1 ");
        List<Object> queryParams = new ArrayList<Object>();

        if (roleName != null && (!roleName.equals(""))) {
            int index = queryParams.size() + 1;
            whereHql.append(" and role.fdRoleName like :p" + index).append(" ");
            queryParams.add("%" + roleName + "%");
        }
        QueryResult<Role> queryResult = roleDao.query(Role.class, firstindex, pageView.getMaxresult(), whereHql.toString(), queryParams.toArray(), orderby);
        pageView.setQueryResult(queryResult);
        return pageView;
    }

    /**
     * 创建角色
     * @return
     */
    public ResultVO createRole(Role role, Integer userId){
        ResultVO resultVO = new ResultVO(true);
        //查询所有角色信息
        List<Role> roleList = this.query().getResultlist();
        if (isKeyExist(roleList, role.getFdRoleKey())) {
            resultVO.setOk(false);
            resultVO.setMsg("角色键值已存在");
            return resultVO;
        }
        Role roles = new Role();
        roles.setFdRoleName(role.getFdRoleName());
        role.setFdRoleKey(role.getFdRoleKey());
        roleDao.save(roles);
        //添加账号角色关联
        UserRole userRole = new UserRole();
        userRole.setFdUserId(userId);
        userRole.setFdRoleId(roles.getFdId());
        userRoleDao.save(userRole);
        resultVO.setMsg("创建角色成功");
        return resultVO;
    }

    /**
     * 删除角色
     * @param roleIds
     * @return
     */
    @Override
    public ResultVO deleteRole(int[] roleIds) {
        ResultVO resultVO = new ResultVO(true);
        //获取所有角色
        List<Role> roles = this.query().getResultlist();
        for (int roleId : roleIds) {
            //根据角色ID获取角色
            Role role = roleDao.getInfoById(roles, roleId);
            if (role == null) {
                resultVO.setOk(false);
                resultVO.setMsg("角色不存在");
                return resultVO;
            }
            this.remove(roleId);
            rolePermissionDao.deleteByRoleId(roleId);
            userRoleDao.deleteByRoleId(roleId);
            resultVO.setMsg("删除角色成功");
        }
        return resultVO;
    }

    /**
     * 编辑角色
     * @return
     */
    public ResultVO editRole(Role role) {
        ResultVO resultVO = new ResultVO(true);
        //获取所有角色
        List<Role> roles = this.query().getResultlist();
        //根据角色ID获取角色
        Role roleinfo = roleDao.getInfoById(roles, role.getFdId());
        if (roleinfo == null) {
            resultVO.setOk(false);
            resultVO.setMsg("角色不存在");
            return resultVO;
        }
        if (!roleinfo.getFdRoleKey().equals(role.getFdRoleKey()) && isKeyExist(roles, role.getFdRoleKey())) {
            resultVO.setOk(false);
            resultVO.setMsg("角色键值已存在");
            return resultVO;
        }
        Role update = new Role();
        update.setFdId(role.getFdId());
        update.setFdRoleName(role.getFdRoleName());
        update.setFdRoleKey(role.getFdRoleKey());
        this.update(update);
        resultVO.setMsg("编辑角色成功");
        return resultVO;
    }

    /**
     * 角色授权
     * @param roleId
     * @param perIdArray
     * @return
     */
    @Override
    public ResultVO grantPermissions(int roleId, Integer[] perIdArray) {
        ResultVO resultVO = new ResultVO(true);
        //获取所有角色
        List<Role> roles = this.query().getResultlist();
        //根据角色ID获取角色
        Role role = roleDao.getInfoById(roles, roleId);
        if (role == null) {
            resultVO.setOk(false);
            resultVO.setMsg("角色不存在");
            return resultVO;
        }
        //获取所有权限
        List<Permission> permissions = permissionService.query().getResultlist();
        Set<Integer> perIdSet = new HashSet<Integer>();
        for (Integer id : perIdArray) {
            perIdSet.add(id);
        }
        //删除角色权限
        rolePermissionDao.deleteByRoleId(roleId);
        //授权
        if (!perIdSet.isEmpty()) {
            for (Integer perId : perIdSet) {
                RolePermission rolePermission = new RolePermission();
                rolePermission.setFdRoleId(roleId);
                rolePermission.setFdPermissionId(perId);
                rolePermissionDao.save(rolePermission);

            }
        }
        resultVO.setMsg("授权成功");
        return resultVO;
    }

    private static boolean isKeyExist(List<Role> roles, String key) {
        for (Role role : roles) {
            if (role.getFdRoleKey().equals(key)) {
                return true;
            }
        }
        return false;
    }
}
