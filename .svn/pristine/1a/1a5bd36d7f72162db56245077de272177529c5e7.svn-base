package com.puban.overtime.task.service.impl;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.puban.framework.core.page.QueryResult;
import com.puban.framework.core.service.impl.BaseServiceImpl;
import com.puban.overtime.authority.model.User;
import com.puban.overtime.authority.service.IUserService;
import com.puban.overtime.task.dao.ITaskDao;
import com.puban.overtime.task.model.Task;
import com.puban.overtime.task.service.ITaskService;


/*** 
* @author wangchunping 
* @date 2016年5月25日 上午9:40:43 
* <p>Title:TaskServiceImpl </p>
* <p>Description:任务实现类 </p>
*/
@Service
public class TaskServiceImpl extends BaseServiceImpl<Task> implements ITaskService
{
	@Autowired
	private ITaskDao taskDao;
	
	@Autowired
	IUserService userService;

	/** 申请正常任务**/
	@Override
	public boolean updateTaskByNormal(Task task)
	{
		Integer taskId = task.getFdId();
		if(null == taskId)
		{
			return false;
		}
		Task t = this.findByPrimaryKey(taskId);
		if(null == t)
		{
			return false;
		}
		t.setFdNormalStartTime(task.getFdNormalStartTime());
		t.setFdNormalEndTime(task.getFdNormalEndTime());
		t.setFdTaskContent(task.getFdTaskContent());
		this.update(t);
		return true;
	}
	
	/** 分配任务**/
	@Override
	public boolean saveNewTask(Task task)
	{
		if(null == task)
		{
			return false;
		}
		User user = null;
		if(null == (user = task.getUser()))
		{
			return false;
		}
		Integer userId = null;
		if(null == user || null == (userId = user.getFdId()))
		{
			return false;
		}
		user = userService.findByPrimaryKey(userId);
		task.setUser(user);
		this.save(task);
		return true;
		
	}
	
	/**
	 * 查询我的所有被分配任务
	 */
	public QueryResult<Task> queryNormalListByUser(Integer currentPage, Integer pageSzie, Integer userId)
	{
		List<Object> queryParams = new ArrayList<Object>();
		StringBuffer sb = new StringBuffer("");
		sb.append(" 1=1 ");
		sb.append(" and fd_normal_start_time is not null and fd_normal_end_time is not null");
		if (userId > 0)
		{
			int index = queryParams.size() + 1;
			sb.append(" and user.fdId=:p" + index).append(" ");
			queryParams.add(userId);
		}
		LinkedHashMap<String, String> orderby = new LinkedHashMap<String, String>();
		orderby.put("fdNormalStartTime", "desc");
		
		QueryResult<Task> myTaskListPage = taskDao.query(Task.class, (currentPage - 1) * pageSzie,
				pageSzie, sb.toString(), queryParams.toArray(), orderby);
		return myTaskListPage;
	}
	
	/**
	* @author wangchunping
	* @date 2016年5月24日 上午11:21:45
	* <p>Description: 查询出所有任务</p>
	* <p>Paramter:currentPage 当前页, pageSzie每页显示记录数 </p>
	* <p>Return: 返回任务分页列表对象QueryResult<Task></p>
	*/
	@Override
	public QueryResult<Task> queryTaskList(Integer currentPage, Integer pageSzie)
	{
		QueryResult<Task> taskListPage = taskDao.query(Task.class, (currentPage - 1) * pageSzie, pageSzie);
		return taskListPage;
	}

	/**
	* @author wangchunping
	* @date 2016年5月24日 上午11:23:04
	* <p>Description:查询我的所有任务 </p>
	* <p>Paramter:currentPage 当前页, pageSzie每页显示记录数 ,userId当前用户ID </p>
	* <p>Return: 返回任务分页列表对象QueryResult<Task></p>
	*/
	@Override
	public QueryResult<Task> queryMyTaskList(Integer currentPage, Integer pageSzie, Integer userId)
	{
		List<Object> queryParams = new ArrayList<Object>();
		StringBuffer sb = new StringBuffer("");
		sb.append(" 1=1 ");
		if (userId > 0)
		{
			int index = queryParams.size() + 1;
			sb.append(" and user.fdId=:p" + index).append(" ");
			queryParams.add(userId);
		}
		
		LinkedHashMap<String, String> orderby = new LinkedHashMap<String, String>();
		orderby.put("fdStartTime", "desc");
		
		QueryResult<Task> myTaskListPage = taskDao.query(Task.class, (currentPage - 1) * pageSzie,
				pageSzie, sb.toString(), queryParams.toArray(), orderby);
		return myTaskListPage;
	}

	/**
	* @author wangchunping
	* @date 2016年5月24日 上午11:23:04
	* <p>Description:查询我的所有任务 </p>
	* <p>Paramter:currentPage 当前页, pageSzie每页显示记录数 ,userId当前用户ID </p>
	* <p>Return: 返回任务分页列表对象QueryResult<Task></p>
	*/
	@Override
	public List<Task> queryTaskList()
	{
		List<Task> taskList=taskDao.query(Task.class).getResultlist();
		return taskList;
	}

	/**
	* @author wangchunping
	* @date 2016年5月24日 上午11:23:04
	* <p>Description:查询我的所有任务 </p>
	* <p>Paramter:userId当前用户ID </p>
	* <p>Return: 返回任务列表List<Task></p>
	*/
	@Override
	public List<Task> queryMyTaskList(Integer userId)
	{
		return taskDao.queryMyTaskList(userId);
	}

	
	/**
	* @author wangchunping
	* @date 2016年5月24日 下午3:15:48
	* <p>Description:根据任务编号查找任务 </p>
	* <p>Paramter:code任务唯一code </p>
	* <p>Return: 返回任务Task</p>
	*/
	@Override
	public Task queryMyTaskByCode(String code)
	{
		return taskDao.queryMyTaskByCode(code);
	}
	
	private Task selectUser(Integer userId, Task task)
	{
		User user = userService.findByPrimaryKey(userId);
		if (null != user)
		{
			task.setUser(user);
			return task;
		}
		return null;
	}

}
