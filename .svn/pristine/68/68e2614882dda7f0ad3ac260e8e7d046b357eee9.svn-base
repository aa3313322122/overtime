package com.puban.overtime.authority.controller;

import com.alibaba.fastjson.JSON;
import com.puban.framework.core.controller.BaseController;
import com.puban.overtime.authority.model.User;
import com.puban.overtime.authority.shiro.ResultVO;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.DisabledAccountException;
import org.apache.shiro.authc.IncorrectCredentialsException;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.subject.Subject;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.servlet.http.HttpServletResponse;

/**
 * @author zengyong@puban.com
 * @ClassName: UserController
 * @Description: 用户登录、注销
 * @date: 2016/5/23
 */

@Controller
@RequestMapping(value = "/userlogin")
public class UserController extends BaseController {
    /*@Autowired
    private IUserService userService;*/

    @RequestMapping(value = "/login", method = RequestMethod.GET)
    public String loginForm(Model model) {
       model.addAttribute("user", new User());
        return "view/login";
    }

    @RequestMapping(value = "/check-login", method = RequestMethod.POST)
    public void login(String username,String password , boolean rememberMe, HttpServletResponse response) {
        System.out.print("用户名：" + username + "密码：" + password);
        ResultVO result = new ResultVO();
        //使用权限工具验证用户登录，登录成功后跳到shiro配置的successUrl中，与下面的return没什么关系！
        UsernamePasswordToken token = new UsernamePasswordToken(username,password);
        token.setRememberMe(rememberMe);
        Subject subject = SecurityUtils.getSubject();
        try {
            subject.login(token);
            result.setOk(true);
        } catch (UnknownAccountException e) {
            result.setMsg("账号不存在");
        } catch (DisabledAccountException e) {
            result.setMsg("账号未启用");
        } catch (IncorrectCredentialsException e) {
            result.setMsg("密码错误");
        } catch (RuntimeException e) {
            result.setMsg("未知错误,请联系管理员");
        }
        ajaxJson(JSON.toJSONString(result), response);
    }


    /**
     * 直接跳转用户界面
     * @return
     */
    @RequestMapping(value = "/userIndex", method = RequestMethod.GET)
    public String userIndex() {
        return "view/user";
    }

    @RequestMapping(value = "/logout", method = RequestMethod.GET)
    public String logout(RedirectAttributes redirectAttributes) {
        //使用权限管理工具进行用户的退出，跳出登录，给出提示信息
        SecurityUtils.getSubject().logout();
        redirectAttributes.addFlashAttribute("message", "您已安全退出");
        return "redirect:admin/login";
    }

    @RequestMapping("/403")
    public String unauthorizedRole() {
        return "/403";
    }

    @RequestMapping(value = "/index", method = RequestMethod.GET)
    public String index(Model model) {
        model.addAttribute("user", new User());
        return "view/index";
    }
}
