package com.puban.overtime.authority.service.impl;

import com.puban.framework.core.page.PageView;
import com.puban.framework.core.page.QueryResult;
import com.puban.framework.core.service.impl.BaseServiceImpl;
import com.puban.overtime.authority.dao.IPermissionDao;
import com.puban.overtime.authority.dao.IRoleDao;
import com.puban.overtime.authority.dao.IUserDao;
import com.puban.overtime.authority.model.Permission;
import com.puban.overtime.authority.model.Role;
import com.puban.overtime.authority.model.User;
import com.puban.overtime.authority.service.IUserService;
import com.puban.overtime.authority.shiro.ResultVO;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;

/**
 * @author zengyong@puban.com
 * @ClassName: UserServiceImpl
 * @Description:
 * @date: 2016/5/18
 */
@Service
public class UserServiceImpl extends BaseServiceImpl<User> implements IUserService {
    @Autowired
    private IUserDao userDao;
    @Autowired
    private IPermissionDao permissionDao;
    @Autowired
    private IRoleDao roleDao;

    /**
     * 根据账号id获取授权
     *
     * @param userId
     * @return
     */
    @Override
    public SimpleAuthorizationInfo getUserRolePermission(int userId) {
        SimpleAuthorizationInfo token = new SimpleAuthorizationInfo();
        //获取所有权限
        List<Permission> permissionList = permissionDao.query(Permission.class).getResultlist();
        //用户角色名字
        Set<String> roleNameSet = new HashSet<String>();
        //权限名字
        Set<String> perNameSet = new HashSet<String>();
        //获取所有角色
        List<Role> roleList = roleDao.query(Role.class).getResultlist();
      /*  //根据用户id获取用户角色id
        List<UserRole> roleIdSet = userRoleDao.findRoleIdSetByUserId(userId);
        if (roleIdSet != null && !roleIdSet.isEmpty()) {
            for (UserRole roleId : roleIdSet) {
                //根据角色list的ID获取角色
                Role role = roleDao.getInfoById(roleList, roleId.getFdRoleId());
                if (role != null) {
                    //将角色名称存入
                    roleNameSet.add(role.getFdRoleKey());
                }
                //根据角色id获取权限id集合
                List<RolePermission> permissionIdSet = rolePermissionDao.getPermissionIdSetByRoleId(roleId.getFdRoleId());
                if (permissionIdSet != null && !permissionIdSet.isEmpty()) {
                    for (RolePermission permissionId : permissionIdSet) {
                        //根据权限list的ID获取权限
                        Permission permission = permissionDao.getPermissionById(permissionList, permissionId.getFdPermissionId());
                        String key = permission.getFdPermissionKey();
                        if (StringUtils.isNotBlank(key)) {
                            perNameSet.add(key);
                        }
                    }
                }
            }
        }*/
        //设置角色权限，将角色名称和权限key设置进token
        token.setRoles(roleNameSet);
        token.setStringPermissions(perNameSet);
        return token;
    }

    @Override
    public User getUserInfoByName(String name) {
        return userDao.getUserInfoByName(name);
    }

    /**
     * 更新保存
     * @param user
     * @param roleId
     */
    @Override
    public void update(User user, Integer[] roleId) {
        User u = userDao.find(User.class,user.getFdId());
        Set<Role> roles = new HashSet<Role>();
        if (null != roleId) {
            for (Integer r : roleId) {
                Role role = new Role();
                role.setFdId(r);
                roles.add(role);
            }
            u.setRoles(roles);
        }
        u.setFdId(user.getFdId());
        u.setFdPassword(user.getFdPassword());
        u.setFdUserName(user.getFdUserName());
        u.setFdEmail(user.getFdEmail());
        u.setFdMobilePhone(user.getFdMobilePhone());
        userDao.update(u);
    }

    /**
     * 保存用户
     * @param user
     * @param roleId
     */
    @Override
    public void save(User user, Integer[] roleId) {
        Set<Role> roles = new HashSet<Role>();
        if (null != roleId) {
            for (Integer r : roleId) {
                Role role = new Role();
                role.setFdId(r);
                roles.add(role);
            }
        }
        user.setRoles(roles);
        userDao.save(user);
    }

    /**
     * 删除用户信息
     * @param userId
     */
    @Override
    public void delete(Integer userId) {
        User user =this.findByPrimaryKey(userId);
        user.getRoles().remove(user.getRoles());
        userDao.remove(User.class, user.getFdId());
    }

    /**
     * 用户列表条件查询
     * @param username
     * @param currentPage
     * @return
     */
    @Override
    public PageView<User> queryBySerach(String username, Integer currentPage) {
        PageView<User> pageView = new PageView<User>(5, currentPage);
        /** 查询条件 **/
        List<Object> paramterList = new ArrayList<Object>();

        if (currentPage == null) {
            currentPage = 1;
        }
        int firstindex = (pageView.getCurrentpage() - 1) * pageView.getMaxresult();

        LinkedHashMap<String, String> orderby = new LinkedHashMap<String, String>();
        orderby.put("fdId", "desc");

        StringBuffer whereHql = new StringBuffer();
        whereHql.append(" 1=1 ");
        List<Object> queryParams = new ArrayList<Object>();

        if(username !=null && (!username.equals(""))){
            int index = queryParams.size() + 1;
            whereHql.append(" and user.fdUserName like :p" + index).append(" ");
            queryParams.add("%" + username + "%");
        }
        QueryResult<User> queryResult = userDao.query(User.class,firstindex, pageView.getMaxresult(), whereHql.toString(), queryParams.toArray(), orderby);
        pageView.setQueryResult(queryResult);
        return pageView;
    }

    /**
     * 新增用户
     */
    @Override
    public ResultVO saveUser(String fdUserName,String fdPassword){

        ResultVO resultVO = new ResultVO(true);

        User usersInfo = userDao.getUserInfoByName(fdUserName);
        if (usersInfo != null) {
            resultVO.setOk(false);
            resultVO.setMsg("账号已存在");
            return resultVO;
        }
        //保存
        User user = new User();
        user.setFdUserName(fdUserName);
        user.setFdPassword(fdPassword);
        this.save(user);
        resultVO.setMsg("注册成功");
        return resultVO;




    }

}
